class Solution {
public:
    vector<string> restoreIpAddresses(string s) {
        vector<string> result;
        vector<string> current;
        backtrack(s, 0, current, result);
        return result;
    }

private:
    void backtrack(string &s, int index, vector<string> &current, vector<string> &result) {
        // If 4 parts are made and we reached end of string
        if (current.size() == 4) {
            if (index == s.size()) {
                result.push_back(join(current));
            }
            return;
        }

        // Try taking 1 to 3 digits for each part
        for (int len = 1; len <= 3; ++len) {
            if (index + len > s.size()) break;
            string part = s.substr(index, len);

            // Leading zero check
            if (part.size() > 1 && part[0] == '0') continue;

            // Range check 0-255
            int val = stoi(part);
            if (val > 255) continue;

            current.push_back(part);
            backtrack(s, index + len, current, result);
            current.pop_back();
        }
    }

    string join(vector<string> &parts) {
        string ip;
        for (int i = 0; i < parts.size(); ++i) {
            if (i > 0) ip += '.';
            ip += parts[i];
        }
        return ip;
    }
};
