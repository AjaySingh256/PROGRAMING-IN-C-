// search-in-rotated-sorted-array
#include <iostream>
#include <vector>

using namespace std;

int binarySearch(vector<int>& nums, int lo, int hi, int target) {
    while (lo <= hi) {
        int mid = lo + (hi - lo) / 2;
        if (nums[mid] == target) return mid;
        else if (nums[mid] > target) hi = mid - 1;
        else lo = mid + 1;
    }
    return -1;
}

int search(vector<int>& nums, int target) {
    int n = nums.size();
    if (n == 0) return -1;
    if (n == 1) return nums[0] == target ? 0 : -1;

    int lo = 0, hi = n - 1, pivot = -1;

    // Finding pivot (smallest element index)
    while (lo < hi) {
        int mid = lo + (hi - lo) / 2;
        if (nums[mid] > nums[hi]) lo = mid + 1;
        else hi = mid;
    }
    pivot = lo;

    // Binary search in correct segment
    if (target >= nums[pivot] && target <= nums[n - 1])
        return binarySearch(nums, pivot, n - 1, target);
    else
        return binarySearch(nums, 0, pivot - 1, target);
}

int main() {
    vector<int> nums = {4, 5, 6, 7, 0, 1, 2};
    int target;
    
    cout << "Enter target: ";
    cin >> target;
    
    int result = search(nums, target);
    
    if (result != -1)
        cout << "Element found at index: " << result << endl;
    else
        cout << "Element not found" << endl;

    return 0;
}
// ***OUTPUT***
// Enter target: 0
// Element found at index: 4
