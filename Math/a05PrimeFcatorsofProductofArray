// Distinict Prime Fcators of Product of Array
#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

void fillSieve(vector<bool>& sieve) {
    int n = sieve.size() - 1;
    for (int i = 2; i <= sqrt(n); i++) {  // O(n)
        if (sieve[i]) {
            for (int j = i * 2; j <= n; j += i) {
                sieve[j] = 0;
            }
        }
    }
}

int distinctPrimeFactors(vector<int>& nums) {
    int n = nums.size();
    int mx = -1;

    // Find the maximum number in nums
    for (int i = 0; i < n; i++) {
        if (nums[i] > mx) {
            mx = nums[i];
        }
    }

    vector<bool> sieve(mx + 1, 1);  // 1 means prime
    if (mx + 1 > 0) sieve[0] = 0;
    if (mx + 1 > 1) sieve[1] = 0;

    fillSieve(sieve);

    // Store prime numbers
    vector<int> primes;
    for (int i = 2; i <= mx; i++) {
        if (sieve[i]) primes.push_back(i);
    }

    vector<bool> taken(primes.size(), 0);
    for (int i = 0; i < nums.size(); i++) {
        int ele = nums[i];
        for (int j = 0; j < primes.size(); j++) {
            if (primes[j] > ele) break;
            if (ele % primes[j] == 0) taken[j] = 1;
        }
    }

    int count = 0;
    for (int i = 0; i < taken.size(); i++) {
        if (taken[i]) count++;
    }
    return count;
}

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;

    vector<int> nums(n);
    cout << "Enter elements: ";
    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }

    cout << "Distinct prime factors count: " << distinctPrimeFactors(nums) << endl;
    return 0;
}

// ***OUTPUT***
// Enter number of elements: 6
// Enter elements: 2
// 4
// 3
// 7
// 10
// 6
// Distinct prime factors count: 4
