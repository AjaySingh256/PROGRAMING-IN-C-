// Diagonal Prime 
#include <iostream>
#include <cmath>
#include <algorithm>

using namespace std;

bool isPrime(int n) {
    if (n == 1) return false;
    for (int i = 2; i <= sqrt(n); i++) {
        if (n % i == 0) return false;
    }
    return true;
}

int diagonalPrime(int nums[][100], int n) { // Assuming max size is 100
    int mx = 0;
    for (int i = 0; i < n; i++) {
        if (isPrime(nums[i][i])) {
            mx = max(mx, nums[i][i]);
        }
        if (isPrime(nums[i][n - i - 1])) {
            mx = max(mx, nums[i][n - i - 1]);
        }
    }
    return mx;
}

int main() {
    int n;
    cin >> n; // Input size of matrix
    int nums[100][100]; // Assuming max size is 100x100
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> nums[i][j];
        }
    }

    cout << diagonalPrime(nums, n) << endl;
    return 0;
}
***OUTPUT***
1 2 3
4 5 6 
7 8 9
max prime
7




